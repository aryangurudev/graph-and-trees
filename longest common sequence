#include <bits/stdc++.h>
using namespace std;

// define maximum length of sequence X and Y
#define M 20
#define N 20

// create a 2D-array to store solutions of subproblems
// All its values will be initailzed by 0 by default


// Function to find length of Longest Common Subsequence of substring
// X[0..m-1] and Y[0..n-1]
int LCSLength(string X, string Y, int m, int n, int lookup[][50])
{
	// return if we have reached the end of either string
	if (m == 0 || n == 0)
		return 0;

	// if sub-problem is seen for the first time, solve it and
	// store its result in an array
	if (lookup[m][n] == 0)
	{
		// if last character of X and Y matches
		if (X[m - 1] == Y[n - 1])
			lookup[m][n] = LCSLength(X, Y, m - 1, n - 1, lookup) + 1;

		else
		// else if last character of X and Y don't match
		lookup[m][n] = max(LCSLength(X, Y, m, n - 1, lookup), LCSLength(X, Y, m - 1, n, lookup));
	}

	// return the subproblem solution from the array
	return lookup[m][n];
}

int solve()
{

	string X , Y ;
	cin>>X>>Y;
	int lookup[50][50]={0};


	cout<< LCSLength(X, Y, X.length(), Y.length(),lookup)<<endl;

	return 0;
}
int main()
{
    int k;
    cin>>k;
    while(k--){
        solve();
    }
}
